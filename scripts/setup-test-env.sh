#!/bin/bash

# 🧪 Test Environment Setup Script
# This script helps you set up a test environment for the Fraud Detection System

set -e

echo "🧪 Setting up Test Environment for Fraud Detection System"
echo "========================================================="

# Check if we're in the project root
if [ ! -f "backend/package.json" ]; then
    echo "❌ Please run this script from the project root directory"
    exit 1
fi

# Create test environment file
echo "📝 Creating test environment configuration..."

cat > backend/.env.test << EOF
# Test Environment Configuration
# Generated by setup-test-env.sh

# Test Database URL
# For local testing with Docker:
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_db"

# For cloud test database (e.g., Neon, Supabase):
# DATABASE_URL="postgresql://username:password@host:port/test_database"

# Test Environment
NODE_ENV=test

# Test-specific configurations
LOG_LEVEL=debug
ENABLE_LOGGING=true

# Test API configurations
API_PORT=3001
API_HOST=localhost

# Test WebSocket configurations
WS_PORT=3002
WS_HOST=localhost
EOF

echo "✅ Test environment file created: backend/.env.test"

# Create Docker Compose for test database
echo "🐳 Creating Docker Compose for test database..."

cat > docker-compose.test.yml << EOF
version: '3.8'

services:
  test-db:
    image: postgres:15
    container_name: fraud-detection-test-db
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - test-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  test-db-data:
EOF

echo "✅ Docker Compose file created: docker-compose.test.yml"

# Create test database setup script
echo "🔧 Creating test database setup script..."

cat > scripts/setup-test-db.sh << 'EOF'
#!/bin/bash

# Test Database Setup Script
# This script sets up a test database for the Fraud Detection System

set -e

echo "🗄️ Setting up Test Database..."

# Start test database
echo "🚀 Starting test database..."
docker-compose -f docker-compose.test.yml up -d

# Wait for database to be ready
echo "⏳ Waiting for database to be ready..."
until docker-compose -f docker-compose.test.yml exec -T test-db pg_isready -U postgres; do
  echo "Database not ready yet, waiting..."
  sleep 2
done

echo "✅ Database is ready!"

# Run database migrations
echo "🔄 Running database migrations..."
cd backend
npx prisma generate
npx prisma db push --schema=./prisma/schema.prisma

# Seed test data
echo "🌱 Seeding test data..."
npm run seed

echo "✅ Test database setup complete!"
echo ""
echo "📊 Test Database Info:"
echo "   Host: localhost"
echo "   Port: 5433"
echo "   Database: test_db"
echo "   Username: postgres"
echo "   Password: postgres"
echo ""
echo "🔗 Connection URL: postgresql://postgres:postgres@localhost:5433/test_db"
EOF

chmod +x scripts/setup-test-db.sh

echo "✅ Test database setup script created: scripts/setup-test-db.sh"

# Create test cleanup script
echo "🧹 Creating test cleanup script..."

cat > scripts/cleanup-test-db.sh << 'EOF'
#!/bin/bash

# Test Database Cleanup Script
# This script cleans up the test database

set -e

echo "🧹 Cleaning up Test Database..."

# Stop and remove test database
echo "🛑 Stopping test database..."
docker-compose -f docker-compose.test.yml down -v

# Remove test environment file
echo "🗑️ Removing test environment file..."
rm -f backend/.env.test

echo "✅ Test environment cleanup complete!"
EOF

chmod +x scripts/cleanup-test-db.sh

echo "✅ Test cleanup script created: scripts/cleanup-test-db.sh"

# Update package.json scripts
echo "📦 Adding test scripts to package.json..."

# Check if scripts section exists in root package.json
if [ -f "package.json" ]; then
    echo "📝 Adding test scripts to root package.json..."
    # This would require more complex JSON manipulation
    echo "   Note: You may want to manually add these scripts to package.json:"
    echo "   \"test:setup\": \"./scripts/setup-test-db.sh\""
    echo "   \"test:cleanup\": \"./scripts/cleanup-test-db.sh\""
    echo "   \"test:db:start\": \"docker-compose -f docker-compose.test.yml up -d\""
    echo "   \"test:db:stop\": \"docker-compose -f docker-compose.test.yml down\""
fi

echo ""
echo "🎉 Test Environment Setup Complete!"
echo "=================================="
echo ""
echo "📋 Available Commands:"
echo "   ./scripts/setup-test-db.sh    - Set up test database"
echo "   ./scripts/cleanup-test-db.sh  - Clean up test database"
echo "   docker-compose -f docker-compose.test.yml up -d    - Start test database"
echo "   docker-compose -f docker-compose.test.yml down     - Stop test database"
echo ""
echo "🔧 Next Steps:"
echo "1. Review and update backend/.env.test with your test database URL"
echo "2. Run: ./scripts/setup-test-db.sh"
echo "3. Run tests: cd backend && npm test"
echo ""
echo "🌐 GitHub Actions:"
echo "   Add TEST_DATABASE_URL secret to your GitHub repository"
echo "   The CI workflow will automatically use it for testing" 