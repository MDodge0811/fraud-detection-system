# Current ML Implementation: Simple Weighted Risk Model

## Overview
The system uses a custom simple weighted risk model instead of external ML libraries for reliability and simplicity. This is complemented by a basic rule-based analyzer for comparison.

## Dual Risk Analyzer System
- **ML Risk Analyzer**: Custom simple weighted risk model
- **Basic Risk Analyzer**: Rule-based analyzer for comparison
- **Side-by-side logging**: Both analyzers provide risk scores and reasoning

## ML Risk Analyzer Features
- **Feature Extraction**: 
  - Normalized amount (amount / 10000)
  - Device age (hours: (NOW() - Devices.last_seen) / 3600)
  - Merchant risk_level (0-100)
  - Transaction frequency (COUNT(Transactions) in last 5 min per user)
  - Average user amount (AVG(amount) in last 24 hours)
  - User account age (days since user creation)

- **Risk Scoring Algorithm**:
  ```typescript
  // Simple weighted risk model
  const riskScore = (
    (normalizedAmount * 0.3) +
    (deviceAgeRisk * 0.2) +
    (merchantRisk * 0.25) +
    (frequencyRisk * 0.15) +
    (averageAmountRisk * 0.1)
  ) * 100;
  ```

## Training Data
- **Source**: 11,500+ transactions with fraud patterns
- **Storage**: Training_Data table with JSONB features
- **Model Persistence**: ML_Models table for model data storage
- **Retraining**: Automatic retraining on startup if no model exists

## Real-Time Scoring
- **Feature Extraction**: SQL queries for real-time feature calculation
- **Risk Assessment**: Weighted scoring with configurable thresholds
- **Alert Generation**: High-risk transactions (>75%) trigger alerts
- **WebSocket Updates**: Real-time dashboard updates

## Basic Risk Analyzer (Comparison)
- **Rule-based scoring**: Simple rules for risk assessment
- **Feature analysis**: Amount, merchant risk, device age, frequency
- **Risk levels**: Low (0-30%), Medium (31-70%), High (71-100%)
- **Reasoning**: Detailed explanations for risk scores

## Code Patterns
```typescript
// ML Risk Analyzer
const mlRisk = await analyzeTransactionRiskML(transaction);
// Basic Risk Analyzer  
const basicRisk = await analyzeTransactionRisk(transaction);

// Side-by-side logging
console.log(`ML Risk: ${mlRisk.score}% (${mlRisk.level})`);
console.log(`Basic Risk: ${basicRisk.score}% (${basicRisk.level})`);
console.log(`ML Reasons: ${mlRisk.reasons.join(', ')}`);
console.log(`Basic Reasons: ${basicRisk.reasons.join(', ')}`);
```

## Database Integration
- **Prisma ORM**: Type-safe database queries
- **Model Storage**: JSONB storage for model parameters
- **Training Data**: Comprehensive dataset with fraud patterns
- **Performance**: Indexed queries for real-time feature extraction

## Production Considerations
- **Railway Deployment**: Production database with seeding scripts
- **Prisma Client Reset**: Automatic reset on startup to clear cached plans
- **Error Handling**: Fallback mechanisms for numerical issues
- **Monitoring**: Comprehensive logging for both analyzers
  - Normalize, predict, insert to Risk_Signals if >75, trigger Alert.
  
Evaluation: Compute accuracy on validation set; aim for >80%. Retrain periodically (comment for production).