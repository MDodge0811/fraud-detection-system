name: Deploy to Vercel

on:
  push:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID_FRONTEND: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
  VERCEL_PROJECT_ID_BACKEND: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    name: Deploy Frontend
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
          working-directory: ./frontend
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Frontend deployed to: ${{ steps.deploy.outputs.preview-url }}`
            })

  deploy-backend:
    runs-on: ubuntu-latest
    name: Deploy Backend
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Generate Prisma client
        run: |
          cd backend
          npx prisma generate

      - name: Build application
        run: |
          cd backend
          npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
          working-directory: ./backend
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}

      - name: Run database migrations
        if: github.ref == 'refs/heads/main'
        run: |
          cd backend
          npx prisma db push --accept-data-loss

      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Backend deployed to: ${{ steps.deploy.outputs.preview-url }}`
            })

  notify-deployment:
    runs-on: ubuntu-latest
    name: Notify Deployment
    if: github.ref == 'refs/heads/main' && always()
    needs: [deploy-frontend, deploy-backend]
    
    steps:
      - name: Notify Slack
        if: secrets.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: |
            ðŸš€ Fraud Detection System deployed to production!
            Frontend: ${{ needs.deploy-frontend.outputs.preview-url }}
            Backend: ${{ needs.deploy-backend.outputs.preview-url }}

      - name: Create deployment summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## ðŸš€ Deployment Summary
            
            **Environment:** Production
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            
            ### Services Deployed:
            - âœ… Frontend: ${{ needs.deploy-frontend.outputs.preview-url }}
            - âœ… Backend: ${{ needs.deploy-backend.outputs.preview-url }}
            
            ### Database:
            - âœ… Migrations applied
            - âœ… Prisma client generated
            
            ### Next Steps:
            - [ ] Verify frontend functionality
            - [ ] Test WebSocket connections
            - [ ] Monitor error rates
            - [ ] Check performance metrics`;
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: summary
            }); 